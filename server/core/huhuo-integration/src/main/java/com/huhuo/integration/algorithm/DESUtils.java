package com.huhuo.integration.algorithm;

import java.security.NoSuchAlgorithmException;

import javax.crypto.Cipher;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;

import com.huhuo.integration.config.GlobalConstant.Encoding;
import com.huhuo.integration.exception.UtilException;

public class DESUtils {
	/** default secret key factory generate algorithm key **/
	private static final String SCHEME = "DESede";
	/** default encrypt key **/
	private static String defaultEncryptKey = "012345678901234567890123";
	/** default encoding between convertion of byte[] **/
	private static String encoding = Encoding.UTF8;
	
	private static Cipher cipher;
	
	private static SecretKey secretKey;
	
	/**
	 * generate clipher with default scheme(algorithm)
	 * @return
	 */
	public static Cipher getCipher() {
		if(cipher == null) {
			try {
				cipher = Cipher.getInstance(SCHEME);
			} catch (NoSuchAlgorithmException e) {
				throw new UtilException(e);
			} catch (NoSuchPaddingException e) {
				throw new UtilException(e);
			}
		}
		return cipher;
	}
	/**
	 * generate secret key with default scheme and encrypt key
	 * @param algorithm
	 * @param encryptKey
	 * @return
	 */
	public static SecretKey getSecretKey(String algorithm, String encryptKey) {
		if(secretKey == null) {
			try {
				DESedeKeySpec dks = new DESedeKeySpec(encryptKey.getBytes(encoding));
				secretKey = SecretKeyFactory.getInstance(algorithm).generateSecret(dks);
			} catch (Exception e) {
				throw new UtilException(e);
			}
		}
		return secretKey;
	}
	/**
	 * encrypt byte array @param srcByte
	 * @param srcByte
	 * @return byte array after encrypted
	 */
	public static byte[] encrypt(byte[] srcByte) {
		try {
			// initial Cipher's encrypt process with specified scheme and encrypt key 
			getCipher().init(Cipher.ENCRYPT_MODE, getSecretKey(SCHEME, defaultEncryptKey));
			// encrypt srcByte
			return getCipher().doFinal(srcByte);
		} catch (Exception e) {
			throw new UtilException(e);
		}
	}
	/**
	 * decrypt byte array @param srcByte
	 * @param srcByte
	 * @return byte array after decrypted
	 */
	public static byte[] decrypt(byte[] encryptedByte) {
		try {
			// initial Cipher's encrypt process with specified scheme and encrypt key 
			getCipher().init(Cipher.DECRYPT_MODE, getSecretKey(SCHEME, defaultEncryptKey));
			// encrypt srcByte
			return getCipher().doFinal(encryptedByte);
		} catch (Exception e) {
			throw new UtilException(e);
		}
	}
	/**
	 * encrypt byte array @param srcByte, and encode with base64
	 * @param srcByte
	 * @return base64 string of encrypted byte array @param srcByte
	 */
	public static String encryptByte(byte[] srcByte) {
		byte[] encrypt = encrypt(srcByte);
		return Base64Utils.encodeByte(encrypt);
	}
	/**
	 * convert @param src to byte array with encoding, and then encrypt the byte array
	 * @see #encryptByte(byte[])
	 * @param src
	 * @param encoding
	 * @return
	 */
	public static String encrypt(String src, String encoding) {
		try {
			byte[] encrypt = encrypt(src.getBytes(encoding));
			return Base64Utils.encodeByte(encrypt);
		} catch (Exception e) {
			throw new UtilException(e);
		}
	}
	/**
	 * @see #encrypt(String, String)
	 */
	public static String encrypt(String src) {
		try {
			byte[] encrypt = encrypt(src.getBytes(encoding));
			return Base64Utils.encodeByte(encrypt);
		} catch (Exception e) {
			throw new UtilException(e);
		}
	}
	/**
	 * descrypt @param encryptedStr to byte array, and generate string result with charset @param encoding
	 * @param encryptedStr string generated by encrypted byte array encoded with base64
	 * @param encoding 
	 * @return
	 */
	public static String decrypt(String encryptedStr, String encoding) {
		try {
			// get original encrypted byte array
			byte[] encrypted = Base64Utils.decodeBase64(encryptedStr.getBytes(encoding));
			// decrypt byte array and convert to string with charset encoding
			byte[] decrypt = decrypt(encrypted);
			return new String(decrypt, encoding);
		} catch (Exception e) {
			throw new UtilException(e);
		}
	}
	/**
	 * descrypt @param encryptedStr with "UTF-8" as original encoding
	 * @see #decrypt(String, String)
	 */
	public static String decrypt(String encryptedStr) {
		return decrypt(encryptedStr, encoding);
	}
	
	/**
	 * test
	 */
	public static void main(String[] args) throws Exception {
		/*** second verify **/
		String src2 = "按时打发了快乐";
		System.out.println("src string --> " + src2);
		String encrypt = encrypt(src2, "UTF-8");
		System.out.println("encrypt string --> " + encrypt);
		String decrypt = decrypt(encrypt, "UTF-8");
		System.out.println("decrypt string --> " + decrypt);
	}
	

}
